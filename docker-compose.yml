version: '3.8'

networks:
  proxy-platform:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:

services:
  # ====================
  # 基础设施服务
  # ====================
  
  # MySQL主数据库
  mysql:
    image: mysql:8.0
    container_name: proxy-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: proxy_platform
      MYSQL_USER: proxy_user
      MYSQL_PASSWORD: proxy_pass123
    volumes:
      - mysql_data:/var/lib/mysql
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - proxy-platform
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: proxy-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./deployments/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - proxy-platform
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ====================
  # 微服务
  # ====================

  # 网关服务
  gateway:
    build:
      context: .
      dockerfile: ./services/gateway/Dockerfile
    container_name: proxy-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - MYSQL_DSN=proxy_user:proxy_pass123@tcp(mysql:3306)/proxy_platform?charset=utf8mb4&parseTime=True&loc=Local
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - JWT_SECRET=proxy-platform-jwt-secret-key-2024
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    networks:
      - proxy-platform
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 代理池服务
  proxy-pool:
    build:
      context: .
      dockerfile: ./services/proxy-pool/Dockerfile
    container_name: proxy-pool
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ENV=development
      - MYSQL_DSN=proxy_user:proxy_pass123@tcp(mysql:3306)/proxy_platform?charset=utf8mb4&parseTime=True&loc=Local
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    networks:
      - proxy-platform
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 管理API服务
  admin-api:
    build:
      context: .
      dockerfile: ./services/admin-api/Dockerfile
    container_name: admin-api
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - ENV=development
      - MYSQL_DSN=proxy_user:proxy_pass123@tcp(mysql:3306)/proxy_platform?charset=utf8mb4&parseTime=True&loc=Local
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - JWT_SECRET=proxy-platform-jwt-secret-key-2024
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    networks:
      - proxy-platform
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 免费代理爬虫服务
  free-crawler:
    build:
      context: .
      dockerfile: ./services/free-crawler/Dockerfile
    container_name: free-crawler
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      - ENV=development
      - MYSQL_DSN=proxy_user:proxy_pass123@tcp(mysql:3306)/proxy_platform?charset=utf8mb4&parseTime=True&loc=Local
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    networks:
      - proxy-platform
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ====================
  # 负载均衡和反向代理
  # ====================

  # Nginx负载均衡器
  nginx:
    image: nginx:alpine
    container_name: proxy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployments/nginx/conf.d:/etc/nginx/conf.d
      - ./deployments/nginx/ssl:/etc/nginx/ssl
    networks:
      - proxy-platform
    depends_on:
      - gateway
      - admin-api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ====================
  # 监控服务
  # ====================

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: proxy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - proxy-platform
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: proxy-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/provisioning:/etc/grafana/provisioning
      - ./deployments/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - proxy-platform
    depends_on:
      - prometheus

  # ====================
  # 前端应用
  # ====================

  # Vue.js前端应用
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: proxy-web
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - ./web:/app
      - /app/node_modules
    networks:
      - proxy-platform
    environment:
      - VITE_API_BASE_URL=http://localhost/api
    command: npm run dev 