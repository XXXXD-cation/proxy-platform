---
description: 
globs: 
alwaysApply: false
---
# 系统架构设计指南

## 整体架构原则
基于微服务架构模式，采用分层设计，确保高性能、高可用性、可扩展性和安全性。

## 架构层次

### 用户层 (User Layer)
- **开发者用户** - 通过API调用代理服务
- **管理员用户** - 通过Web界面管理系统

### 接入层 (Access Layer)  
- **Nginx负载均衡器** - 流量分发和SSL终止
- **API网关** - 统一接入点和路由

### 应用层 (Application Layer)
- **网关服务 (Gateway Service)** - HTTP代理和HTTPS隧道
- **代理池服务 (Proxy Pool Service)** - 智能调度和质量评分
- **管理API服务 (Admin API Service)** - 用户管理和统计分析
- **免费代理爬虫服务 (Free Proxy Crawler Service)** - 代理获取和验证

### 数据层 (Data Layer)
- **MySQL主从集群** - 持久化数据存储
- **Redis集群** - 缓存和会话存储

### 监控层 (Monitoring Layer)
- **Prometheus + Grafana** - 指标收集和可视化监控

## 核心服务详细设计

### 网关服务 (Gateway Service)
**端口**: 8080  
**职责**: 
- 处理客户端代理请求
- 实现HTTP代理协议
- 建立HTTPS隧道连接
- 集成代理调度逻辑

**关键组件**:
```go
// 认证中间件
type AuthMiddleware struct {
    jwtService    *JWTService
    apiKeyService *APIKeyService
}

// 代理调度器
type ProxyScheduler struct {
    poolClient *ProxyPoolClient
    localCache *cache.LRUCache
    redis      *redis.Client
}

// 隧道管理器
type TunnelManager struct {
    activeConnections map[string]*TunnelConnection
    connectionPool    *sync.Pool
}
```

### 代理池服务 (Proxy Pool Service)
**端口**: 8081  
**职责**:
- 管理商业代理资源
- 实现智能调度算法
- 质量评分和监控
- 代理验证和健康检查

**核心算法**:
- **质量评分算法** - 基于响应时间、成功率、地理位置等因素
- **智能调度算法** - 场景感知的最优代理选择
- **负载均衡算法** - 避免单个代理过载

### 管理API服务 (Admin API Service)  
**端口**: 8082  
**职责**:
- 用户注册、登录、管理
- API密钥生成和管理
- 使用统计和分析
- 订阅和支付管理

### 免费代理爬虫服务 (Free Proxy Crawler Service)
**端口**: 8083  
**职责**:
- 从多个网站爬取免费代理
- 代理验证和质量检测
- 反爬虫策略实现
- 定时任务调度

## 数据架构

### MySQL表结构
参考 [docs/系统架构设计文档.md](mdc:docs/系统架构设计文档.md) 中的详细设计：
- `users` - 用户基本信息
- `api_keys` - API密钥管理
- `subscriptions` - 订阅计划管理
- `usage_logs` - 使用记录统计

### Redis数据结构
```
# 代理池数据
proxy:pool:commercial     # 商业代理集合 (Sorted Set)
proxy:pool:free           # 免费代理集合 (Sorted Set)  
proxy:quality:{ip}        # 代理质量数据 (Hash)

# 用户数据  
user:session:{user_id}    # 用户会话 (String)
user:quota:{user_id}      # 用户配额 (Hash)
user:stats:{user_id}      # 用户统计 (Hash)

# 监控数据
monitor:qps               # QPS统计 (Time Series)
monitor:latency           # 延迟统计 (Time Series)
```

## 服务间通信

### 同步通信
- **HTTP REST API** - 管理接口和配置同步
- **gRPC** - 高性能服务间调用 (网关 ↔ 代理池)

### 异步通信  
- **Redis发布/订阅** - 事件通知和配置更新
- **消息队列** - 日志处理和统计计算

## 部署架构

### Docker Compose配置
```yaml
services:
  nginx:          # 负载均衡器
  gateway-1:      # 网关服务实例1  
  gateway-2:      # 网关服务实例2
  proxy-pool:     # 代理池服务
  admin-api:      # 管理API服务
  free-crawler:   # 免费代理爬虫
  mysql-master:   # MySQL主节点
  redis-master:   # Redis主节点
  prometheus:     # 监控服务
  grafana:        # 可视化面板
```

### 高可用设计
- **服务多实例部署** - 网关服务支持水平扩展
- **数据库主从复制** - MySQL读写分离
- **Redis高可用** - 主从+哨兵模式
- **健康检查** - 所有服务都实现健康检查接口

## 性能优化

### 缓存策略
- **本地缓存** - 热点代理IP本地缓存
- **Redis缓存** - 用户信息和配额缓存
- **CDN缓存** - 静态资源CDN加速

### 连接池优化
- **HTTP连接池** - 复用HTTP连接
- **数据库连接池** - GORM连接池配置
- **Redis连接池** - Redis客户端连接池

### 监控指标
- **QPS** - 每秒请求数统计
- **响应时间** - P50、P95、P99延迟
- **错误率** - 服务错误率监控
- **资源使用** - CPU、内存、网络使用率

完整架构详情参考: [docs/系统架构设计文档.md](mdc:docs/系统架构设计文档.md)
