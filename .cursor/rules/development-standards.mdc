---
description: 
globs: 
alwaysApply: false
---
# 开发规范和最佳实践

## 代码规范

### Go代码规范
基于官方Go Code Review Comments和本项目特点制定

#### 命名规范
```go
// 包名：简洁、小写、单数
package gateway
package proxy

// 接口名：动词或名词，清晰表达功能
type ProxyProvider interface {}
type UserValidator interface {}

// 结构体：驼峰命名，首字母大写表示导出
type ProxyScheduler struct {}
type authMiddleware struct {} // 私有结构体

// 方法名：动词开头，清晰表达动作
func (p *ProxyScheduler) SelectBestProxy() {}
func (p *ProxyScheduler) validateProxyIP() {} // 私有方法
```

#### 错误处理
```go
// 错误包装，提供上下文信息
if err != nil {
    return fmt.Errorf("failed to connect to proxy %s: %w", proxyIP, err)
}

// 自定义错误类型
type ProxyError struct {
    IP      string
    Code    int
    Message string
}

func (e *ProxyError) Error() string {
    return fmt.Sprintf("proxy %s error [%d]: %s", e.IP, e.Code, e.Message)
}
```

#### 日志规范
```go
// 使用结构化日志
logger.WithFields(logrus.Fields{
    "user_id":  userID,
    "proxy_ip": proxyIP,
    "latency":  latency,
}).Info("proxy request completed")

// 日志级别使用
// ERROR: 系统错误，需要立即处理
// WARN:  警告信息，可能影响功能
// INFO:  关键业务流程信息
// DEBUG: 调试信息，仅开发环境
```

### Vue.js/TypeScript规范

#### 组件命名
```typescript
// 组件文件名：PascalCase
// UserProfile.vue
// APIKeyManager.vue

// 组件注册：kebab-case
<user-profile />
<api-key-manager />
```

#### TypeScript类型定义
```typescript
// 接口定义
interface User {
  id: number
  username: string
  email: string
  subscriptionPlan: 'developer' | 'professional' | 'enterprise'
}

// API响应类型
interface APIResponse<T> {
  success: boolean
  data: T
  message?: string
}

// 组件Props类型
interface UserProfileProps {
  user: User
  readonly?: boolean
}
```

## 测试标准

### 单元测试
**要求覆盖率 >80%**

#### Go测试规范
```go
// 测试文件命名：*_test.go
// 测试函数命名：Test + 功能名
func TestProxyScheduler_SelectBestProxy(t *testing.T) {
    // Arrange
    scheduler := NewProxyScheduler(mockConfig)
    
    // Act  
    proxy, err := scheduler.SelectBestProxy(context.Background(), request)
    
    // Assert
    assert.NoError(t, err)
    assert.NotNil(t, proxy)
    assert.Greater(t, proxy.QualityScore, 0.8)
}

// 表格驱动测试
func TestValidateProxyIP(t *testing.T) {
    tests := []struct {
        name    string
        ip      string
        wantErr bool
    }{
        {"valid IP", "192.168.1.1:8080", false},
        {"invalid IP", "invalid", true},
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            err := validateProxyIP(tt.ip)
            if tt.wantErr {
                assert.Error(t, err)
            } else {
                assert.NoError(t, err)
            }
        })
    }
}
```

#### 前端测试规范
```typescript
// 使用Vitest + Vue Test Utils
import { describe, it, expect } from 'vitest'
import { mount } from '@vue/test-utils'
import UserProfile from '@/components/UserProfile.vue'

describe('UserProfile', () => {
  it('renders user information correctly', () => {
    const user = {
      id: 1,
      username: 'testuser',
      email: 'test@example.com',
      subscriptionPlan: 'developer' as const
    }
    
    const wrapper = mount(UserProfile, {
      props: { user }
    })
    
    expect(wrapper.text()).toContain('testuser')
    expect(wrapper.text()).toContain('test@example.com')
  })
})
```

### 集成测试
```go
// 数据库集成测试
func TestUserRepository_Integration(t *testing.T) {
    if testing.Short() {
        t.Skip("skipping integration test")
    }
    
    db := setupTestDB(t)
    defer cleanupTestDB(t, db)
    
    repo := NewUserRepository(db)
    
    // 测试完整的CRUD操作
    user := &User{Username: "testuser", Email: "test@example.com"}
    err := repo.Create(user)
    assert.NoError(t, err)
    
    found, err := repo.GetByUsername("testuser")
    assert.NoError(t, err)
    assert.Equal(t, user.Email, found.Email)
}
```

## 性能标准

### 响应时间要求
- **代理请求**: P99 < 200ms
- **API接口**: P95 < 500ms  
- **数据库查询**: P95 < 100ms
- **页面加载**: 首屏 < 3s

### 并发处理能力
- **网关服务**: 支持1000+ QPS
- **代理池服务**: 支持并发代理验证
- **数据库**: 支持200+ 并发连接

### 基准测试
```go
// 性能基准测试
func BenchmarkProxyScheduler_SelectBestProxy(b *testing.B) {
    scheduler := NewProxyScheduler(config)
    request := &ProxyRequest{
        TargetDomain: "example.com",
        GeoLocation:  "US",
    }
    
    b.ResetTimer()
    for i := 0; i < b.N; i++ {
        _, err := scheduler.SelectBestProxy(context.Background(), request)
        if err != nil {
            b.Fatal(err)
        }
    }
}
```

## 安全开发标准

### 输入验证
```go
// 严格的输入验证
func validateAPIKey(apiKey string) error {
    if len(apiKey) != 64 {
        return errors.New("invalid API key length")
    }
    
    if !regexp.MustCompile(`^[a-zA-Z0-9]+$`).MatchString(apiKey) {
        return errors.New("invalid API key format")
    }
    
    return nil
}
```

### 敏感信息处理
```go
// 密码加密存储
func hashPassword(password string) (string, error) {
    bytes, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
    return string(bytes), err
}

// 避免敏感信息日志输出
type User struct {
    ID       int64  `json:"id"`
    Username string `json:"username"`
    Email    string `json:"email"`
    Password string `json:"-"` // 不会被序列化
}
```

### SQL注入防护
```go
// 使用GORM参数化查询
func (r *UserRepository) GetByEmail(email string) (*User, error) {
    var user User
    err := r.db.Where("email = ?", email).First(&user).Error
    return &user, err
}
```

## Git工作流程

### 分支策略
- **main/master**: 生产环境代码，只接受合并请求
- **develop**: 开发主分支，用于集成测试
- **feature/xxx**: 功能开发分支
- **hotfix/xxx**: 紧急修复分支

### 提交规范
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

类型说明：
- **feat**: 新功能
- **fix**: 修复bug
- **docs**: 文档更新
- **style**: 代码格式调整
- **refactor**: 代码重构
- **test**: 测试相关
- **chore**: 构建过程或辅助工具的变动

示例：
```
feat(gateway): add HTTPS tunnel support

Implement CONNECT method handling for HTTPS proxy tunnels.
Support both HTTP and HTTPS target servers.

Closes #123
```

### 代码评审清单
- [ ] 代码符合项目规范
- [ ] 单元测试覆盖率达标
- [ ] 性能测试通过
- [ ] 安全检查通过
- [ ] 文档更新完成
- [ ] 日志记录适当
- [ ] 错误处理完善

## CI/CD标准

### 自动化检查
```yaml
# .github/workflows/ci.yml
- name: Lint
  run: golangci-lint run
  
- name: Test  
  run: go test -v -race -coverprofile=coverage.out ./...
  
- name: Coverage
  run: go tool cover -func=coverage.out | grep total
```

### 部署检查
- [ ] 所有测试通过
- [ ] 代码覆盖率 >80%
- [ ] 静态分析无高危问题
- [ ] 安全扫描通过
- [ ] 性能基准测试通过

参考开发任务详情: [docs/MVP开发任务书.md](mdc:docs/MVP开发任务书.md)
